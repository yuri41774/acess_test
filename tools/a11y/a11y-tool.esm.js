// ESM entry for A11yTool (re-exports same API as the UMD bundle)
export function sRGBtoLin(v) { v = v / 255; return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4); }
export function luminance(r,g,b) { return 0.2126 * sRGBtoLin(r) + 0.7152 * sRGBtoLin(g) + 0.0722 * sRGBtoLin(b); }
export function contrastRatio(rgb1, rgb2) { const L1 = luminance(rgb1[0],rgb1[1],rgb1[2]); const L2 = luminance(rgb2[0],rgb2[1],rgb2[2]); const lighter = Math.max(L1,L2); const darker = Math.min(L1,L2); return (lighter + 0.05) / (darker + 0.05); }
export function parseComputedRGB(colorStr){ if(!colorStr) return null; const m=colorStr.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/i); if(m) return [parseInt(m[1],10),parseInt(m[2],10),parseInt(m[3],10)]; const hex=colorStr.replace('#','').trim(); if(hex.length===3) return [parseInt(hex[0]+hex[0],16),parseInt(hex[1]+hex[1],16),parseInt(hex[2]+hex[2],16)]; if(hex.length===6) return [parseInt(hex.slice(0,2),16),parseInt(hex.slice(2,4),16),parseInt(hex.slice(4,6),16)]; return null; }
export function elementSelector(el){ if(!el) return ''; let sel=el.tagName.toLowerCase(); if(el.id) sel += `#${el.id}`; else if(el.className) sel += '.' + Array.from(el.classList).slice(0,2).join('.'); return sel; }

export function findTextElementsAndCheckContrast(root=document){ const nodes=Array.from(root.querySelectorAll('p,span,a,li,button,label,h1,h2,h3,h4,h5,h6,td,th')); const results=[]; for(const el of nodes){ try{ const style=window.getComputedStyle(el); if(!style||style.visibility==='hidden'||style.display==='none'||parseFloat(style.opacity)===0) continue; const text=el.textContent&&el.textContent.trim(); if(!text) continue; const fg=parseComputedRGB(style.color); if(!fg) continue; let bgColor=null,node=el,complexBackground=false; while(node&&node!==document.documentElement){ const styleNode=window.getComputedStyle(node); const bg=styleNode.backgroundColor; const bgImage=styleNode.backgroundImage; if(bgImage&&bgImage!=='none') complexBackground=true; if(bg&&bg!=='rgba(0, 0, 0, 0)'&&bg!=='transparent'){ bgColor=bg; break; } node=node.parentElement; } if(!bgColor) bgColor=window.getComputedStyle(document.body).backgroundColor||'rgb(255,255,255)'; const bg=parseComputedRGB(bgColor)||[255,255,255]; const ratio=contrastRatio(fg,bg); const fontSize=parseFloat(style.fontSize)||12; const fontWeight=style.fontWeight||'400'; const isLarge=fontSize>=18||(fontSize>=14&&parseInt(fontWeight,10)>=700); const required=isLarge?3.0:4.5; results.push({ selector: elementSelector(el), ratio, required, passes: ratio>=required, complexBackground }); }catch(e){ } } return results; }

export async function runAxe(root){ if(typeof axe==='undefined') throw new Error('axe-core not available'); const target=root||document; const res=await axe.run(target); return res; }
export async function runFullChecks(root){ const results={axe:null,contrast:null}; try{ results.axe = (typeof axe !== 'undefined') ? await runAxe(root) : null; }catch(e){ results.axe = { error: String(e) }; } try{ results.contrast = findTextElementsAndCheckContrast(root); }catch(e){ results.contrast = { error: String(e) }; } return results; }
export function exportReport(obj, filename='a11y-report.json'){ const blob=new Blob([JSON.stringify(obj,null,2)],{type:'application/json'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download=filename; a.click(); URL.revokeObjectURL(url); }
export async function revalidateElement(root){ return runFullChecks(root); }

const defaultExport = { runAxe, runContrast: findTextElementsAndCheckContrast, runFullChecks, exportReport, revalidateElement };
export default defaultExport;
